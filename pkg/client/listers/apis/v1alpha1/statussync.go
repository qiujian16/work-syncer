// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/qiujian16/work-syncer/pkg/apis/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StatusSyncLister helps list StatusSyncs.
// All objects returned here must be treated as read-only.
type StatusSyncLister interface {
	// List lists all StatusSyncs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StatusSync, err error)
	// StatusSyncs returns an object that can list and get StatusSyncs.
	StatusSyncs(namespace string) StatusSyncNamespaceLister
	StatusSyncListerExpansion
}

// statusSyncLister implements the StatusSyncLister interface.
type statusSyncLister struct {
	indexer cache.Indexer
}

// NewStatusSyncLister returns a new StatusSyncLister.
func NewStatusSyncLister(indexer cache.Indexer) StatusSyncLister {
	return &statusSyncLister{indexer: indexer}
}

// List lists all StatusSyncs in the indexer.
func (s *statusSyncLister) List(selector labels.Selector) (ret []*v1alpha1.StatusSync, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StatusSync))
	})
	return ret, err
}

// StatusSyncs returns an object that can list and get StatusSyncs.
func (s *statusSyncLister) StatusSyncs(namespace string) StatusSyncNamespaceLister {
	return statusSyncNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StatusSyncNamespaceLister helps list and get StatusSyncs.
// All objects returned here must be treated as read-only.
type StatusSyncNamespaceLister interface {
	// List lists all StatusSyncs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StatusSync, err error)
	// Get retrieves the StatusSync from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.StatusSync, error)
	StatusSyncNamespaceListerExpansion
}

// statusSyncNamespaceLister implements the StatusSyncNamespaceLister
// interface.
type statusSyncNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StatusSyncs in the indexer for a given namespace.
func (s statusSyncNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StatusSync, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StatusSync))
	})
	return ret, err
}

// Get retrieves the StatusSync from the indexer for a given namespace and name.
func (s statusSyncNamespaceLister) Get(name string) (*v1alpha1.StatusSync, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("statussync"), name)
	}
	return obj.(*v1alpha1.StatusSync), nil
}
